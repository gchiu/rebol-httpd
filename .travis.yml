#
# .travis.yml contains YAML-formatted (http://www.yaml.org/) instructions
# for testing the Simple Rebol HTTPD Server for Rebol 3 (Ren-C):
#
# http://docs.travis-ci.com/
#
# This file should follow the conventions of the Ren-C project, so see the
# notes in its `.travis.yml` file on indentation and other conventions:
#
# https://github.com/metaeducation/ren-c/blob/master/.travis.yml
#

notifications:
  email: false  # committers are keeping an eye on failures, supposedly!


# Travis defaults to 50; not needed, use 3 (just 1 affects queue notification)
#
# https://docs.travis-ci.com/user/customizing-the-build/#git-clone-depth
#
git:
  depth: 3


# Each configured matrix instance has its own customized environment variables
# to give it unique behavior.  But there are also global environment keys,
# available to the overall Travis process itself (e.g. deployment)
#
# https://docs.travis-ci.com/user/environment-variables/#Global-Variables
#
env:
  global:
    - CDN=https://metaeducation.s3.amazonaws.com/travis-builds


# All Travis instances in the following "matrix" will run the same `script:`
# code (found later on in the file).  However, each instance has environment
# variables which can guide that script to behave differently.
#
# We don't compile Rebol here, but pull the latest debug builds from the main
# Ren-C process, which have been uploaded to Amazon S3.  However, it is
# helpful to keep the environment variables which were set in the corresponding
# build here.
#
# Ideally we would test the HTTPD server on Windows as well as Linux and OS X.
# But since we use Travis, we currently don't do that.
#
matrix:
  include:
    # [1] Linux x64, debug, g++
    #
    - os: linux
      dist: trusty  # Note: released in 2013
      sudo: false  # force new container-based infrastructure.
      language: cpp
      env:
        - NUMBER=1
        - CONFIG=generic-c++.r
        - OS_ID=0.4.40
        - DEBUG=asserts
        - STANDARD=c++0x
        - RIGOROUS=yes
        - STATIC=yes
        - TCC=tcc
        - ARCH_CFLAGS=
        - WITH_FFI=dynamic  # see note about being only build w/FFI for now
        - ODBC_REQUIRES_LTDL=no
        - EXTENSIONS="ODBC + ZeroMQ + TCC + Signal + FFI +"
        - ASAN_SYMBOLIZER_PATH=/usr/bin/llvm-symbolizer-3.4
        - ASAN_OPTIONS=symbolize=1
      addons:
        apt:
          packages:  # need for shared libraries to run the debug r3
            - unixodbc-dev  # for ODBC extension
            - libzmq3-dev  # for ZeroMQ extension
            #
            # !!! In theory we should be able to use the stock tcc here.
            # In practice, there's something wrong with the variadics in
            # this old Linux.  So we have to build a newer tcc ourselves
            #
            #- libtcc-dev  # for being able to `-ltcc` for compilation API
            #- tcc  # tcc executable (unused), but gets libtcc1.a + tcc headers
            - libffi-dev

    # [2] OSX x64, debug, clang++
    #
    # @rgchris (the original author of httpd) uses OS X, so that makes it an
    # additional motivation to include it in the matrix.
    #
    - os: osx
      osx_image: xcode11  # try a newer OS X to avoid homebrew update (10.14)
      language: cpp
      env:
        - NUMBER=2
        - CONFIG=generic-c++.r
        - OS_ID=0.2.40
        - DEBUG=asserts
        - STANDARD=c++11
        - RIGOROUS=no
        - STATIC=no  # static linking switch not honored
        - WITH_FFI=dynamic
        - ODBC_REQUIRES_LTDL=no
        - EXTENSIONS="ODBC + ZeroMQ +"
        - BREW=yes
      # libraries (ODBC, ZeroMQ...) added via brew in `install` step below
      # Note: TCC extension has not been implemented for Mac


# The install step occurs before the `script:` step runs.  The language that
# was specified in the `matrix:` entry for each instance will guide certain
# default tools that will be installed.  But you can add custom steps:
#
# https://docs.travis-ci.com/user/customizing-the-build#Customizing-the-Installation-Step
#
# We install an appropriate build of Rebol.  The debug builds are "kitchen
# sink" builds, which include ZeroMQ and ODBC dependencies as shared libraries.
# It's desirable to use a debug build here so go ahead and do that.
#
install:
  - |
    #
    # The Travis OS X images have brew preinstalled, but get old and out of
    # sync with the package database.  This means brew has to update.  It's
    # supposed to do this automatically, but circa 2017 it broke in some
    # images due to the lack of a sufficiently up-to-date Ruby:
    #
    # https://github.com/travis-ci/travis-ci/issues/8552
    #
    # But even if brew can update automatically, it generates an unsightly
    # amount of output if it does so during a `brew install`.  So redirect
    # the hundreds of lines to /dev/null to shorten the Travis log.
    #
    # https://github.com/Homebrew/legacy-homebrew/issues/35662
    #
    if [[ $BREW = yes ]]; then  # seems to not work on old OS X
      brew update > /dev/null

      brew install unixodbc  # for ODBC extension
      brew install zmq  # for ZeroMQ extension
    fi

  - |
    function download { # src target
      echo "DOWNLOADING $1"
      curl -s $1 > $2
    }

  - |
    download "$CDN/0.13.2/last-deploy.short-hash" last-deploy.short-hash
    hash=`cat last-deploy.short-hash`

  - |
    download $CDN/$OS_ID/r3-$hash-debug-cpp r3
    chmod +x r3
    rm last-deploy.short-hash

script:
  - |
    # whatever home directory Travis put us in, run there
    TOP_DIR="$(pwd)"  # https://stackoverflow.com/a/10795195/

  # Grab the abbreviated and full git commit ID into environment variables.
  # The full commit is passed to make to build into the binary, and the
  # abbreviated commit is used to name the executable.
  #
  # http://stackoverflow.com/a/42549385/211160
  #
  # !!! Written this way, this will be the git commit of the rebol-httpd
  # project, not the commit ID of the embedded Rebol executable.  It is
  # probably the case that the hash of the embedded Rebol makes more sense
  # to use, but this .travis.yml is a work in progress.
  #
  - GIT_COMMIT="$(git show --format="%H" --no-patch)"
  - echo "$GIT_COMMIT"
  - GIT_COMMIT_SHORT="$(git show --format="%h" --no-patch)"
  - echo "$GIT_COMMIT_SHORT"

# TEST STEPS
#
# The tests are designed to call QUIT and return 1 status on failure, with
# 0 returned on success.

  - ./r3 tests/simple.reb

  - ./r3 tests/stress.reb

# vim: set et sw=2:
